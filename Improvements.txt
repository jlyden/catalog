1. Refactor with decorators for authorization - DONE

from functools import wraps

def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'username' in login_session:
            return f(*args, **kwargs)
        else:
            flash(“You are not allowed to access there")
            return redirect(url_for('login', next=request.url))
    return decorated_function

@login_required
def yourFunction(args):
    your code...

http://flask.pocoo.org/docs/0.10/patterns/viewdecorators/


2. when deleting recipient
ON DELETE CASCADE
http://docs.sqlalchemy.org/en/rel_0_9/orm/cascades.html


3. "It's recommended to use "value" instead "placeholder" to allow the user edit over the actual string value and get a more user-friendly? experience when editing item's properties?."


