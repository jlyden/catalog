Iterative Development

Test after each stage

1. Mock-up designs & URLs for webpages
 a. How many TYPES of pages?
 b. Use pencil & paper

2. Set up routing for application in Flask
 a. Create handler.py
	from flask import Flask
	app = Flask(__name__)

	if __name__ == '__main__':
		app.debug = True
		app.run(host = '0.0.0.0', port = 5000)
 b. Create methods for each URL to return test messages in browser
	@app.route('/')
	def showSomething():
		return render_template('something.html', things = things)

3. Build templates & forms for webpages
 a. Create templates, including base.html, for each webpage
 b. To avoid errors, add "fake database" as dictionaries in handler.py
	#Fake Restaurants
	restaurant = {'name': 'The CRUDdy Crab', 'id': '1'}
	restaurants = [{'name': 'The CRUDdy Crab', 'id': '1'}, {'name':'Blue Burgers', 'id':'2'},{'name':'Taco Hut', 'id':'3'}]
	#Fake Menu Items
	items = [ {'name':'Cheese Pizza', 'description':'made with fresh cheese', 'price':'$5.99','course' :'Entree', 'id':'1'}, {'name':'Chocolate Cake','description':'made with Dutch Chocolate', 'price':'$3.99', 'course':'Dessert','id':'2'},{'name':'Caesar Salad', 'description':'with fresh organic vegetables','price':'$5.99', 'course':'Entree','id':'3'},{'name':'Iced Tea', 'description':'with lemon','price':'$.99', 'course':'Beverage','id':'4'},{'name':'Spinach Dip', 'description':'creamy dip with fresh spinach','price':'$1.99', 'course':'Appetizer','id':'5'} ]
	item =  {'name':'Cheese Pizza','description':'made with fresh cheese','price':'$5.99','course' :'Entree'}
 c. Leave # in <form action = '#' method = 'POST'> and <a href = '#'>
 d. Account for "no items" case

4. Add CRUD functionality using SQLAlchemy
 a. Setup database.py
 b. Set up CRUD for methods as needed (GET or POST)
 c. Add url_for and redirect when necessary
 d. include message flashing for when things are created, updated, deleted

5. Add API endpoints
 a. import jsonify, add methods as needed
 b. add serialize property to database setup
 c. other API endpoint - XML
 -- http://stackoverflow.com/questions/29023035/how-to-create-xml-endpoint-in-flask

6. Add security - OAuth2
 a. https://pythonhosted.org/Flask-Security/
 b. In Delete, "use POST requests and nonces to prevent CSRF"
 - use token generated at login (https://www.owasp.org/index.php/CSRF_Prevention_Cheat_Sheet#General_Recommendation:_Synchronizer_Token_Pattern)
 c. in all post methods?

7. Add styling - CSS, JavaScript, images, message flashing (done), etc
 a. add files to /static folder

8. Add extra credit
 a. Delete EC - prevent CSRF - WTF forms - https://flask-wtf.readthedocs.org/en/latest/quickstart.html
 b. images?
